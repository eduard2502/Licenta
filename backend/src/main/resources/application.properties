# ===============================================
# SERVER CONFIGURATION
# ===============================================
server.port=8080

# ===============================================
# SPRING DATASOURCE (H2 - In-Memory for Development)
# ===============================================
# Activarea consolei web H2
spring.h2.console.enabled=true
# Calea către consola H2 (accesibilă la http://localhost:8080/h2-console)
spring.h2.console.path=/h2-console

# Configurația conexiunii H2
spring.datasource.url=jdbc:h2:mem:magazindb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=ed
spring.datasource.password=test

# ===============================================
# SPRING DATASOURCE (PostgreSQL - Exemplu pentru Producție/Dezvoltare Avansată)
# Decomentează și configurează aceste linii când treci la PostgreSQL
# ===============================================
#spring.datasource.url=jdbc:postgresql://localhost:5432/numele_bazei_tale_de_date
#spring.datasource.username=userul_tau_postgres
#spring.datasource.password=parola_ta_postgres
#spring.datasource.driverClassName=org.postgresql.Driver

# ===============================================
# JPA/HIBERNATE CONFIGURATION
# ===============================================
# Dialectul specific bazei de date (Hibernate îl detectează adesea automat din URL-ul datasource)
# Pentru H2:
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
# Pentru PostgreSQL (dacă folosești PostgreSQL):
#spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# Strategia de generare a schemei DDL (Data Definition Language) de către Hibernate
# Opțiuni:
#   create: Creează schema la fiecare pornire, ștergând datele existente. Util pentru teste.
#   create-drop: Creează schema la pornire și o șterge la oprire. Util pentru teste.
#   update: Actualizează schema dacă detectează modificări în entități. Util pentru dezvoltare.
#   validate: Validează schema existentă cu entitățile, nu face modificări.
#   none: Nu face nimic legat de DDL. Recomandat pentru producție unde migrațiile se fac cu Flyway/Liquibase.
spring.jpa.hibernate.ddl-auto=update

# Afișează SQL-ul generat de Hibernate în consolă (util pentru debugging)
spring.jpa.show-sql=true

# Formatează SQL-ul afișat pentru a fi mai lizibil
spring.jpa.properties.hibernate.format_sql=true

# Alte proprietăți Hibernate (opțional)
# spring.jpa.properties.hibernate.use_sql_comments=true

# ===============================================
# SPRING SECURITY JWT CONFIGURATION
# ===============================================
# Secretul folosit pentru a semna token-urile JWT.
# TREBUIE să fie o valoare lungă, complexă și unică pentru aplicația ta.
# NU folosi această valoare în producție așa cum este! Generează un secret puternic.
app.jwtSecret=CheiaTaSecretaPentruJWTArTrebuiSaFieLungaSiComplexaSiStocataSecurizat
# Durata de expirare a token-ului JWT în milisecunde
# Exemplu: 86400000 ms = 24 ore
app.jwtExpirationMs=86400000

# ===============================================
# SPRINGDOC OPENAPI (SWAGGER UI) CONFIGURATION
# ===============================================
# Calea pentru documentația JSON a API-ului
springdoc.api-docs.path=/api-docs
# Calea pentru interfața Swagger UI
springdoc.swagger-ui.path=/swagger-ui.html
# Titlul și descrierea afișate în Swagger UI (opțional)
springdoc.swagger-ui.title=Magazin Calculatoare API
springdoc.swagger-ui.description=Documentație API pentru aplicația de gestionare a unui magazin de calculatoare.
# Ordonarea tag-urilor (controllerelor) în Swagger UI (opțional, alfabetic sau după tag-uri)
# springdoc.swagger-ui.tagsSorter=alpha
# springdoc.swagger-ui.operationsSorter=alpha

# ===============================================
# ALTE CONFIGURAȚII (opțional)
# ===============================================
# Multipart file upload (dacă vei încărca fișiere direct, deși tu folosești base64)
# spring.servlet.multipart.max-file-size=10MB
# spring.servlet.multipart.max-request-size=10MB

# Logging (poți configura nivelul de log pentru pachetele tale)
# logging.level.com.magazincomputere.magazin_api=DEBUG
# logging.level.org.springframework.web=INFO
# logging.level.org.hibernate.SQL=DEBUG
# logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE # Pentru a vedea valorile parametrilor SQL