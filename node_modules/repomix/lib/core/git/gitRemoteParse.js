import gitUrlParse from 'git-url-parse';
import { RepomixError } from '../../shared/errorHandle.js';
import { logger } from '../../shared/logger.js';
// Check the short form of the GitHub URL. e.g. yamadashy/repomix
const VALID_NAME_PATTERN = '[a-zA-Z0-9](?:[a-zA-Z0-9._-]*[a-zA-Z0-9])?';
const validShorthandRegex = new RegExp(`^${VALID_NAME_PATTERN}/${VALID_NAME_PATTERN}$`);
export const isValidShorthand = (remoteValue) => {
    return validShorthandRegex.test(remoteValue);
};
export const parseRemoteValue = (remoteValue, refs = []) => {
    if (isValidShorthand(remoteValue)) {
        logger.trace(`Formatting GitHub shorthand: ${remoteValue}`);
        return {
            repoUrl: `https://github.com/${remoteValue}.git`,
            remoteBranch: undefined,
        };
    }
    try {
        const parsedFields = gitUrlParse(remoteValue, refs);
        // This will make parsedFields.toString() automatically append '.git' to the returned url
        parsedFields.git_suffix = true;
        const ownerSlashRepo = parsedFields.full_name.split('/').length > 1 ? parsedFields.full_name.split('/').slice(-2).join('/') : '';
        if (ownerSlashRepo !== '' && !isValidShorthand(ownerSlashRepo)) {
            throw new RepomixError('Invalid owner/repo in repo URL');
        }
        const repoUrl = parsedFields.toString(parsedFields.protocol);
        if (parsedFields.ref) {
            return {
                repoUrl: repoUrl,
                remoteBranch: parsedFields.ref,
            };
        }
        if (parsedFields.commit) {
            return {
                repoUrl: repoUrl,
                remoteBranch: parsedFields.commit,
            };
        }
        return {
            repoUrl: repoUrl,
            remoteBranch: undefined,
        };
    }
    catch (error) {
        throw new RepomixError('Invalid remote repository URL or repository shorthand (owner/repo)');
    }
};
export const isValidRemoteValue = (remoteValue, refs = []) => {
    try {
        parseRemoteValue(remoteValue, refs);
        return true;
    }
    catch (error) {
        return false;
    }
};
//# sourceMappingURL=gitRemoteParse.js.map